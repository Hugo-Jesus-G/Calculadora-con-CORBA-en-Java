package Cliente.calculadoraApp;


/**
* calculadoraApp/calculadoraPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from calculadora.idl
* martes 2 de abril de 2024 12:40:53 PM CST
*/

public abstract class calculadoraPOA extends org.omg.PortableServer.Servant
 implements calculadoraOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("sumar", new Integer (0));
    _methods.put ("restar", new Integer (1));
    _methods.put ("multiplicacion", new Integer (2));
    _methods.put ("divicion", new Integer (3));
    _methods.put ("exponencial", new Integer (4));
    _methods.put ("seno", new Integer (5));
    _methods.put ("coseno", new Integer (6));
    _methods.put ("tangente", new Integer (7));
    _methods.put ("shutdown", new Integer (8));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    Integer __method = (Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // calculadoraApp/calculadora/sumar
       {
         double num1 = in.read_double ();
         double num2 = in.read_double ();
         double $result = (double)0;
         $result = this.sumar (num1, num2);
         out = $rh.createReply();
         out.write_double ($result);
         break;
       }

       case 1:  // calculadoraApp/calculadora/restar
       {
         double num1 = in.read_double ();
         double num2 = in.read_double ();
         double $result = (double)0;
         $result = this.restar (num1, num2);
         out = $rh.createReply();
         out.write_double ($result);
         break;
       }

       case 2:  // calculadoraApp/calculadora/multiplicacion
       {
         double num1 = in.read_double ();
         double num2 = in.read_double ();
         double $result = (double)0;
         $result = this.multiplicacion (num1, num2);
         out = $rh.createReply();
         out.write_double ($result);
         break;
       }

       case 3:  // calculadoraApp/calculadora/divicion
       {
         double num1 = in.read_double ();
         double num2 = in.read_double ();
         double $result = (double)0;
         $result = this.divicion (num1, num2);
         out = $rh.createReply();
         out.write_double ($result);
         break;
       }

       case 4:  // calculadoraApp/calculadora/exponencial
       {
         double base = in.read_double ();
         double exponente = in.read_double ();
         double $result = (double)0;
         $result = this.exponencial (base, exponente);
         out = $rh.createReply();
         out.write_double ($result);
         break;
       }

       case 5:  // calculadoraApp/calculadora/seno
       {
         double angle = in.read_double ();
         double $result = (double)0;
         $result = this.seno (angle);
         out = $rh.createReply();
         out.write_double ($result);
         break;
       }

       case 6:  // calculadoraApp/calculadora/coseno
       {
         double angle = in.read_double ();
         double $result = (double)0;
         $result = this.coseno (angle);
         out = $rh.createReply();
         out.write_double ($result);
         break;
       }

       case 7:  // calculadoraApp/calculadora/tangente
       {
         double angle = in.read_double ();
         double $result = (double)0;
         $result = this.tangente (angle);
         out = $rh.createReply();
         out.write_double ($result);
         break;
       }

       case 8:  // calculadoraApp/calculadora/shutdown
       {
         this.shutdown ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:calculadoraApp/calculadora:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public calculadora _this()
  {
    return calculadoraHelper.narrow(
    super._this_object());
  }

  public calculadora _this(org.omg.CORBA.ORB orb)
  {
    return calculadoraHelper.narrow(
    super._this_object(orb));
  }


} // class calculadoraPOA
